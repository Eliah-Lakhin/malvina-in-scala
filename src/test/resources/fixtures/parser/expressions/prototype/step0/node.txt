 > create:
function declaration:2
<<<#test() {
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}>>>


 > create:
block:3 cachable
#test() <<<{
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}>>>


 > create:
expression statement:4
#test() {
    <<<a + b * c;>>>

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;
13...

 > create:
application:5
#test() {
    <<<a + b * c>>>;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;
13...

 > create:
application:6
#test() {
    <<<a>>> + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;
13...

 > create:
application:7
#test() {
    a + <<<b * c>>>;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;
13...

 > create:
application:8
#test() {
    a + <<<b>>> * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;
13...

 > create:
application:9
#test() {
    a + b * <<<c>>>;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;
13...

 > create:
expression statement:10
#test() {
    a + b * c;

    <<<(d + e) * f;>>>

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);
15...

 > create:
application:11
#test() {
    a + b * c;

    <<<(d + e) * f>>>;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);
15...

 > create:
application:12
#test() {
    a + b * c;

    <<<(d + e)>>> * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);
15...

 > create:
application:13
#test() {
    a + b * c;

    (<<<d>>> + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);
15...

 > create:
application:14
#test() {
    a + b * c;

    (d + <<<e>>>) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);
15...

 > create:
application:15
#test() {
    a + b * c;

    (d + e) * <<<f>>>;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);
15...

 > create:
expression statement:16
#test() {
    a + b * c;

    (d + e) * f;

    <<<g - h.i.j[k, l];>>>

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;
17...

 > create:
application:17
#test() {
    a + b * c;

    (d + e) * f;

    <<<g - h.i.j[k, l]>>>;

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;
17...

 > create:
application:18
#test() {
    a + b * c;

    (d + e) * f;

    <<<g>>> - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;
17...

 > create:
application:19
#test() {
    a + b * c;

    (d + e) * f;

    g - <<<h.i.j[k, l]>>>;

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;
17...

 > create:
application:20
#test() {
    a + b * c;

    (d + e) * f;

    g - <<<h.i.j>>>[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;
17...

 > create:
application:21
#test() {
    a + b * c;

    (d + e) * f;

    g - <<<h.i>>>.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;
17...

 > create:
application:22
#test() {
    a + b * c;

    (d + e) * f;

    g - <<<h>>>.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;
17...

 > create:
application:23
#test() {
    a + b * c;

    (d + e) * f;

    g - h.i.j[<<<k>>>, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;
17...

 > create:
application:24
#test() {
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, <<<l>>>];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;
17...

 > create:
expression statement:25
#test() {
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    <<<m = n;>>>

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;
19...

 > create:
application:26
#test() {
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    <<<m = n>>>;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;
19...

 > create:
application:27
#test() {
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = <<<n>>>;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;
19...

 > create:
expression statement:28
#test() {
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    <<<o.p = q;>>>

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;
21...

 > create:
application:29
#test() {
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    <<<o.p = q>>>;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;
21...

 > create:
application:30
#test() {
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    <<<o>>>.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;
21...

 > create:
application:31
#test() {
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = <<<q>>>;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;
21...

 > create:
expression statement:32
...1
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    <<<r++;>>>

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};
23...

 > create:
application:33
...1
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    <<<r++>>>;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};
23...

 > create:
application:34
...1
    a + b * c;

    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    <<<r>>>++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};
23...

 > create:
expression statement:35
...3
    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    <<<s.t(u, v);>>>

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
25...

 > create:
application:36
...3
    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    <<<s.t(u, v)>>>;

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
25...

 > create:
application:37
...3
    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    <<<s>>>.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
25...

 > create:
application:38
...3
    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(<<<u>>>, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
25...

 > create:
application:39
...3
    (d + e) * f;

    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, <<<v>>>);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
25...

 > create:
expression statement:40
...5
    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    <<<w.x() = y;>>>

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };
27...

 > create:
application:41
...5
    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    <<<w.x() = y>>>;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };
27...

 > create:
application:42
...5
    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    <<<w>>>.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };
27...

 > create:
application:43
...5
    g - h.i.j[k, l];

    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = <<<y>>>;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };
27...

 > create:
expression statement:44
...7
    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    <<<w.x[] = y;>>>

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
29...

 > create:
application:45
...7
    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    <<<w.x[] = y>>>;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
29...

 > create:
application:46
...7
    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    <<<w.x>>>[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
29...

 > create:
application:47
...7
    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    <<<w>>>.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
29...

 > create:
application:48
...7
    m = n;

    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = <<<y>>>;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
29...

 > create:
expression statement:49
...9
    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    <<<#x, y => x + y;>>>

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
function:50
...9
    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    <<<#x, y => x + y>>>;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
parameter:51
...9
    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #<<<x>>>, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
parameter:52
...9
    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, <<<y>>> => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
application:53
...9
    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => <<<x + y>>>;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
application:54
...9
    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => <<<x>>> + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
application:55
...9
    o.p = q;

    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + <<<y>>>;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
expression statement:56
...11
    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    <<<#(x: Integer, y: Float => String) {return x + y;};>>>

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
function:57
...11
    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    <<<#(x: Integer, y: Float => String) {return x + y;}>>>;

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
type application:58
...11
    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => <<<String>>>) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
parameter:59
...11
    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(<<<x: Integer>>>, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
parameter:60
...11
    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, <<<y: Float>>> => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
block:61 cachable
...11
    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) <<<{return x + y;}>>>;

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
return:62
...11
    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {<<<return x + y;>>>};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
application:63
...11
    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return <<<x + y>>>;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
application:64
...11
    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return <<<x>>> + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
application:65
...11
    r++;

    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + <<<y>>>;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
expression statement:66
...13
    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    <<<x >> #{
        return y;
    };>>>

    [1, 2, 3].map(#x => x + 10);
}


 > create:
application:67
...13
    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    <<<x >> #{
        return y;
    }>>>;

    [1, 2, 3].map(#x => x + 10);
}


 > create:
application:68
...13
    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    <<<x>>> >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
function:69
...13
    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> <<<#{
        return y;
    }>>>;

    [1, 2, 3].map(#x => x + 10);
}


 > create:
block:70 cachable
...13
    s.t(u, v);

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #<<<{
        return y;
    }>>>;

    [1, 2, 3].map(#x => x + 10);
}


 > create:
return:71
...14

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        <<<return y;>>>
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
application:72
...14

    w.x() = y;

    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return <<<y>>>;
    };

    [1, 2, 3].map(#x => x + 10);
}


 > create:
expression statement:73
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    <<<[1, 2, 3].map(#x => x + 10);>>>
}


 > create:
application:74
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    <<<[1, 2, 3].map(#x => x + 10)>>>;
}


 > create:
application:75
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    <<<[1, 2, 3]>>>.map(#x => x + 10);
}


 > create:
application:76
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [<<<1, 2>>>, 3].map(#x => x + 10);
}


 > create:
application:77
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [<<<1>>>, 2, 3].map(#x => x + 10);
}


 > create:
application:78
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [<<<1>>>, 2, 3].map(#x => x + 10);
}


 > create:
application:79
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, <<<2>>>, 3].map(#x => x + 10);
}


 > create:
application:80
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, <<<3>>>].map(#x => x + 10);
}


 > create:
function:81
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(<<<#x => x + 10>>>);
}


 > create:
parameter:82
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#<<<x>>> => x + 10);
}


 > create:
application:83
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => <<<x + 10>>>);
}


 > create:
application:84
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => <<<x>>> + 10);
}


 > create:
application:85
...17
    w.x[] = y;

    #x, y => x + y;

    #(x: Integer, y: Float => String) {return x + y;};

    x >> #{
        return y;
    };

    [1, 2, 3].map(#x => x + <<<10>>>);
}


 > merge:
compilation unit 1 {
  declaration: function declaration 2 >> 1 {
    name: test
    body: block 3 cachable >> 2 {
      statement: expression statement 4 >> 3 {
        expression: application 5 >> 4 {
          name: plus
          argument: application 6 >> 5 {
            name: a
          }
          argument: application 7 >> 5 {
            name: multiply
            argument: application 8 >> 7 {
              name: b
            }
            argument: application 9 >> 7 {
              name: c
            }
          }
        }
      }
      statement: expression statement 10 >> 3 {
        expression: application 11 >> 10 {
          name: multiply
          argument: application 12 >> 11 {
            name: plus
            argument: application 13 >> 12 {
              name: d
            }
            argument: application 14 >> 12 {
              name: e
            }
          }
          argument: application 15 >> 11 {
            name: f
          }
        }
      }
      statement: expression statement 16 >> 3 {
        expression: application 17 >> 16 {
          name: minus
          argument: application 18 >> 17 {
            name: g
          }
          argument: application 19 >> 17 {
            name: access
            argument: application 20 >> 19 {
              name: j
              argument: application 21 >> 20 {
                name: i
                argument: application 22 >> 21 {
                  name: h
                }
              }
            }
            argument: application 23 >> 19 {
              name: k
            }
            argument: application 24 >> 19 {
              name: l
            }
          }
        }
      }
      statement: expression statement 25 >> 3 {
        expression: application 26 >> 25 {
          name: m
          argument: application 27 >> 26 {
            name: n
          }
        }
      }
      statement: expression statement 28 >> 3 {
        expression: application 29 >> 28 {
          name: p
          argument: application 30 >> 29 {
            name: o
          }
          argument: application 31 >> 29 {
            name: q
          }
        }
      }
      statement: expression statement 32 >> 3 {
        expression: application 33 >> 32 {
          name: next
          argument: application 34 >> 33 {
            name: r
          }
        }
      }
      statement: expression statement 35 >> 3 {
        expression: application 36 >> 35 {
          name: t
          argument: application 37 >> 36 {
            name: s
          }
          argument: application 38 >> 36 {
            name: u
          }
          argument: application 39 >> 36 {
            name: v
          }
        }
      }
      statement: expression statement 40 >> 3 {
        expression: application 41 >> 40 {
          name: x
          argument: application 42 >> 41 {
            name: w
          }
          argument: application 43 >> 41 {
            name: y
          }
        }
      }
      statement: expression statement 44 >> 3 {
        expression: application 45 >> 44 {
          name: access
          argument: application 46 >> 45 {
            name: x
            argument: application 47 >> 46 {
              name: w
            }
          }
          argument: application 48 >> 45 {
            name: y
          }
        }
      }
      statement: expression statement 49 >> 3 {
        expression: function 50 >> 49 {
          parameter: parameter 51 >> 50 {
            name: x
          }
          parameter: parameter 52 >> 50 {
            name: y
          }
          body: application 53 >> 50 {
            name: plus
            argument: application 54 >> 53 {
              name: x
            }
            argument: application 55 >> 53 {
              name: y
            }
          }
        }
      }
      statement: expression statement 56 >> 3 {
        expression: function 57 >> 56 {
          result: type application 58 >> 57 {
            name: String
          }
          parameter: parameter 59 >> 57 {
            type: Integer
            name: x
          }
          parameter: parameter 60 >> 57 {
            type: Float
            name: y
          }
          body: block 61 cachable >> 57 {
            statement: return 62 >> 61 {
              value: application 63 >> 62 {
                name: plus
                argument: application 64 >> 63 {
                  name: x
                }
                argument: application 65 >> 63 {
                  name: y
                }
              }
            }
          }
        }
      }
      statement: expression statement 66 >> 3 {
        expression: application 67 >> 66 {
          name: bind
          argument: application 68 >> 67 {
            name: x
          }
          argument: function 69 >> 67 {
            body: block 70 cachable >> 69 {
              statement: return 71 >> 70 {
                value: application 72 >> 71 {
                  name: y
                }
              }
            }
          }
        }
      }
      statement: expression statement 73 >> 3 {
        expression: application 74 >> 73 {
          name: map
          argument: application 75 >> 74 {
            name: set
            argument: application 76 >> 75 {
              name: set
              argument: application 77 >> 76 {
                name: arrayOf
                argument: application 78 >> 77 {
                  value: 1
                  name: integer
                }
              }
              argument: application 79 >> 76 {
                value: 2
                name: integer
              }
            }
            argument: application 80 >> 75 {
              value: 3
              name: integer
            }
          }
          argument: function 81 >> 74 {
            parameter: parameter 82 >> 81 {
              name: x
            }
            body: application 83 >> 81 {
              name: plus
              argument: application 84 >> 83 {
                name: x
              }
              argument: application 85 >> 83 {
                value: 10
                name: integer
              }
            }
          }
        }
      }
    }
  }
}

