 > create:
expression statement:17
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;

    <<<(1 + 2) * 3;>>>
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:18
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;

    <<<(1 + 2) * 3>>>;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:19
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;

    <<<(1 + 2)>>> * 3;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:20
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;

    (<<<1>>> + 2) * 3;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:21
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;

    (1 + <<<2>>>) * 3;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:22
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;

    (1 + 2) * <<<3>>>;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > merge:
block 5 cachable >> 2 {
  statement: variable definition 6 >> 5 {
    type: Array<Tuple2<A, B>>
    name: elements
    value: application 7 >> 6 {
      name: emptyArray
    }
  }
  statement: variable definition 8 >> 5 {
    type: Function1<A, Integer>
    name: hash
    value: application 9 >> 8 {
      name: hash
    }
  }
  statement: expression statement 17 >> 5 {
    expression: application 18 >> 17 {
      name: multiply
      argument: application 19 >> 18 {
        name: plus
        argument: application 20 >> 19 {
          value: 1
          name: integer
        }
        argument: application 21 >> 19 {
          value: 2
          name: integer
        }
      }
      argument: application 22 >> 18 {
        value: 3
        name: integer
      }
    }
  }
}

