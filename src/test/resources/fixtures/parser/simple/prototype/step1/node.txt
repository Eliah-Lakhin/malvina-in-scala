 > create:
expression statement:39
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    <<<(1 + 2) * 3;>>>
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:40
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    <<<(1 + 2) * 3>>>;
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:41
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    <<<(1 + 2)>>> * 3;
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:42
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    (<<<1>>> + 2) * 3;
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:43
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    (1 + <<<2>>>) * 3;
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:44
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    (1 + 2) * <<<3>>>;
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > merge:
constructor body 11 cachable >> 4 {
  statement: property 12 >> 11 {
    name: elements
    type: type application 13 >> 12 {
      type: Array
      parameters: type parameters 14 >> 13 {
        parameter: type application 15 >> 14 {
          type: Tuple2
          parameters: type parameters 16 >> 15 {
            parameter: type application 17 >> 16 {
              type: A
            }
            parameter: type application 18 >> 16 {
              type: B
            }
          }
        }
      }
    }
    value: application 19 >> 12 {
      name: emptyArray
    }
  }
  statement: property 20 >> 11 {
    name: hash
    type: type application 21 >> 20 {
      type: Function1
      parameters: type parameters 22 >> 21 {
        parameter: type application 23 >> 22 {
          type: A
        }
        parameter: type application 24 >> 22 {
          type: Integer
        }
      }
    }
    value: application 25 >> 20 {
      name: hash
    }
  }
  statement: expression statement 39 >> 11 {
    expression: application 40 >> 39 {
      name: multiply
      argument: application 41 >> 40 {
        name: plus
        argument: application 42 >> 41 {
          value: 1
          name: integer
        }
        argument: application 43 >> 41 {
          value: 2
          name: integer
        }
      }
      argument: application 44 >> 40 {
        value: 3
        name: integer
      }
    }
  }
}

