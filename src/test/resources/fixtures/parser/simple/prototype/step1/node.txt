 > create:
expression statement:34
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    <<<(1 + 2) * 3;>>>
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:35
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    <<<(1 + 2) * 3>>>;
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:36
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    <<<(1 + 2)>>> * 3;
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:37
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    (<<<1>>> + 2) * 3;
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:38
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    (1 + <<<2>>>) * 3;
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:39
export type Hashtable<A, B>(hash: Function1<A, Integer>) {
    this.elements: Array<Tuple2<A, B>> = emptyArray();
    this.hash: Function1<A, Integer> = hash;

    (1 + 2) * <<<3>>>;
}

export function contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > merge:
constructor body 10 cachable >> 4 {
  statement: property 11 >> 10 {
    name: elements
    type: type application 12 >> 11 {
      name: Array
      parameter: type application 13 >> 12 {
        name: Tuple2
        parameter: type application 14 >> 13 {
          name: A
        }
        parameter: type application 15 >> 13 {
          name: B
        }
      }
    }
    value: application 16 >> 11 {
      name: emptyArray
    }
  }
  statement: property 17 >> 10 {
    name: hash
    type: type application 18 >> 17 {
      name: Function1
      parameter: type application 19 >> 18 {
        name: A
      }
      parameter: type application 20 >> 18 {
        name: Integer
      }
    }
    value: application 21 >> 17 {
      name: hash
    }
  }
  statement: expression statement 34 >> 10 {
    expression: application 35 >> 34 {
      name: multiply
      argument: application 36 >> 35 {
        name: plus
        argument: application 37 >> 36 {
          value: 1
          name: integer
        }
        argument: application 38 >> 36 {
          value: 2
          name: integer
        }
      }
      argument: application 39 >> 35 {
        value: 3
        name: integer
      }
    }
  }
}

