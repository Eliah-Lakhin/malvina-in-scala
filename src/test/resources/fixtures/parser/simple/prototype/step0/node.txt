 > create:
type declaration:2
<<<export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;
}>>>

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
type pattern:3
export Hashtable<<<<A, B>>>>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
parameter:4
export Hashtable<A, B>(<<<hash: Function1<A, Integer>>>>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
block:5 cachable
export Hashtable<A, B>(hash: Function1<A, Integer>) <<<{
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;
}>>>

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
variable definition:6
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    <<<elements: Array<Tuple2<A, B>> = emptyArray();>>>
    hash: Function1<A, Integer> = hash;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:7
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = <<<emptyArray()>>>;
    hash: Function1<A, Integer> = hash;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
variable definition:8
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    <<<hash: Function1<A, Integer> = hash;>>>
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
application:9
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = <<<hash>>>;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}


 > create:
function declaration:10
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;
}

<<<export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return false;
}>>>


 > create:
type application:11
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;
}

export #contains(this: Hashtable<A, B>, element: A): <<<Boolean>>> {
    return false;
}


 > create:
parameter:12
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;
}

export #contains(<<<this: Hashtable<A, B>>>>, element: A): Boolean {
    return false;
}


 > create:
parameter:13
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;
}

export #contains(this: Hashtable<A, B>, <<<element: A>>>): Boolean {
    return false;
}


 > create:
block:14 cachable
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean <<<{
    return false;
}>>>


 > create:
return:15
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    <<<return false;>>>
}


 > create:
application:16
export Hashtable<A, B>(hash: Function1<A, Integer>) {
    elements: Array<Tuple2<A, B>> = emptyArray();
    hash: Function1<A, Integer> = hash;
}

export #contains(this: Hashtable<A, B>, element: A): Boolean {
    return <<<false>>>;
}


 > merge:
compilation unit 1 {
  declaration: type declaration 2 >> 1 {
    export: export
    name: Hashtable
    pattern: type pattern 3 >> 2 {
      variable: BA
    }
    parameter: parameter 4 >> 2 {
      type: Function1<A, Integer>
      name: hash
    }
    body: block 5 cachable >> 2 {
      statement: variable definition 6 >> 5 {
        type: Array<Tuple2<A, B>>
        name: elements
        value: application 7 >> 6 {
          name: emptyArray
        }
      }
      statement: variable definition 8 >> 5 {
        type: Function1<A, Integer>
        name: hash
        value: application 9 >> 8 {
          name: hash
        }
      }
    }
  }
  declaration: function declaration 10 >> 1 {
    export: export
    name: contains
    result: type application 11 >> 10 {
      name: Boolean
    }
    parameter: parameter 12 >> 10 {
      type: Hashtable<A, B>
      name: this
    }
    parameter: parameter 13 >> 10 {
      type: A
      name: element
    }
    body: block 14 cachable >> 10 {
      statement: return 15 >> 14 {
        value: application 16 >> 15 {
          name: boolean
        }
      }
    }
  }
}

